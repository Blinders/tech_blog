{"meta":{"title":"Grey Tech Blog","subtitle":"Grey SubTitle","description":"Grey Description","author":"Grey Lee","url":"http://yoursite.com"},"pages":[{"title":"Categories","date":"2018-02-18T11:03:58.000Z","updated":"2018-02-15T06:19:51.000Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"About Grey","date":"2018-02-25T10:52:52.003Z","updated":"2018-02-25T10:52:52.002Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Developer. Writer. Traveler. Developer.현재는 대한민국에서 일을 하고 있는 개발자. 때는 2005년, 19살, 고3.“너는 뭘 제일 잘하니?”진로상담시간에 툭 던진 담임선생님의 이 질문을,만 하루간 곱씹으며 게임을 하다가‘아,그래 내가 컴퓨터 앞에서 밤새는 건 누구한테도 안 지지.’라는 깨달음을 새벽 3시에 얻고 얼토당토 않은 배짱으로 컴퓨터공학과에 입학. 1학년 때 Hello World 를 콘솔에 찍고도 그게 Hell World 의 복선임을 눈치채지 못 함.C 와 어셈블리, 납땜과 임베디드 프로그래밍를 학부 생활 중에 실컷했더니정작 취업시즌이 되어 스마트폰 광풍이 몰아닥치사 부랴부랴 안드로이드도 겸했는데인간만사 새옹지마라, 취업 했더니 학생때 때려죽여도 안 한다던 Web 개발이 주업무가 되어 있음. Writer.초등학교 2학년, 어머니를 따라 재래시장에 갔다가 시장 입구에 위치한 지하 서점을 들렀는데거기서 아무생각없이 꼬리달린 꼬맹이가 주홍빛 구슬을 모으는 내용의 책을사달라 어머니를 졸랐던 것이 도서계에 발을 들인 계기가 됨.그 이후로 소년,순정등 장르를 가리지 않고 마구잡이로 읽어댔더니어느새 집 근처 3대 도서대여점에서 적립 포인트 원탑을 초,중,고 내내 유지함.결국 더 이상은 신간이 아닌 이상 읽을 만화가 없게되자 자연스레 소설로 눈을 돌렸고중2때 가즈나이트라는 판타지 소설을 접한 이후로 글이라는 매개체에 매료되어버림.판타지라는 비문학을 통해서 문학으로 넘어온 흔하디 흔한 케이스였고읽을만큼 읽었으니 나도 내 세계를 펼쳐보길 원해서 펜을 잡은 흔하디 흔한 케이스임.중3때 처녀작을 쓰기 시작해 고등학생땐 잠깐 우리나라 3대 판타지 소설 사이트에서 활동도 함.당시 썼던 소설은 총 3부작의 연대기로 5년간 기획되었지만 사이트 폐쇄와 운명을 함께 함.이후 글을 쓰는게 너무 좋아서 글을 쓰며 살고 싶다고 부모님께 고했다가밥 빌어 먹고 살 놈이라며 18년 인생사에서 가장 호되게 욕을 먹었으나이를 계기로 탈선하고 엄마아빠가 뭘 알아! 를 외칠 정도의 간덩어리는 없는 오장육부와고3 담임선생님의 질문으로 인해 글쟁이가 아닌 개발자로 전직함.그러나 여전히, 일상처럼 글을 써왔고 계속해서 쓰는 중이며지금도 개발자 보다는 글쟁이로 소개하는 것을 더 선호함. Traveler.A to Z의 모든 것을 내가 하고싶은 대로 할 수 있는 여행의 매력에 매료된 여행가.죽기전엔 세계일주를 할 거라는 원대한 목표를 가지고 있음.2017년에 본격적으로 여행의지에 불이 붙어, 비행기만 12번을 탔으며이 글을 쓰는 2018년 2월 기준으로 2개월에 한 번씩 출국 할 예정.이제 그만 좀 가라던가, 아직도 갈 곳이 남았냐는 질문을 들을떄면세계지도를 펼쳐 보여주며 내가 간 곳을 하나씩 짚어보는데,그럴때면 죽을때까지 뼈빠지게 다녀도 못 가볼 나라들이 가득함을 상대에게 상기시켜 줌.한 달 용돈 20만원을 받던 대학시절엔 방학때면 전국 8도를 돌며 국내여행만을 다녔고한 달 월급을 받는 지금은 국내는 이제 됐다 싶어서 해외여행을 실컷 하는 중.영국, 프랑스, 스위스, 몽골, 일본, 중국, 홍콩, 베트남, 이태리, 스페인, 포르투칼, 독일, 체코를 다녀왔으며올해는 일본, 마카오, 크로아티아, 슬로베니아, 오스트리아, 헝가리 여행 예정…이지만 더 추가될 수도 있음.여행의 가장 큰 매력은 첫 줄에서도 말했지만 A to Z 까지 모든 것을 내 마음대로 하는 것이라 생각 중.등교, 혹은 출근을 위해 일어나야 해서 일어나고 내일이란 이름으로 기다리는 현실을 위해 자야하니 자고해야할 일이라는 명호로 건내진 더미들 속에서 인지하고 이해하고 오늘도 살아가는 그야말로 현실적인 삶 속에서일어나고플때 일어나고 자고싶을 때 자고 하고 싶은 일이니까 하고, 혹은 하고싶지 않으니까 안 하는여행이야말로 인간 본연의 자유의지가 극대화되는 것이라고 생각하며 거기에서 오는 희열에 매료되어 여행가를 자청함."},{"title":"Tags","date":"2018-02-18T11:04:07.000Z","updated":"2018-02-15T06:19:51.000Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"[Hexo] Github Page로 블로그 만들기 05","slug":"hexo-blog-make-05","date":"2018-03-25T03:35:53.000Z","updated":"2018-03-25T04:34:09.792Z","comments":true,"path":"2018/03/25/hexo-blog-make-05/","link":"","permalink":"http://yoursite.com/2018/03/25/hexo-blog-make-05/","excerpt":"","text":"저번 포스팅에서 예고했던 대로, 이번 포스팅에서는 _config.yml에 대한 몇 가지 설정 값을 포스팅 할 예정이다.그러다보니 앞선 포스팅에서 필요할 때마다 언급했던 사항들이 중복으로 포스팅 될 수도 있음을 유의하자.또한, 사용해 본 설정 위주의 포스팅이니 사용하지 않았거나 확인되지 않은 설정은 적혀있지 않다는 걸 기억해두기 바란다. Site_사이트에 대한 기본 사항들 title : 웹 브라우저 상단 탭에 표시되는 타이틀이면서 일부 테마에선 메뉴바 Home 으로 쓰위는 위치에도 쓰인다. author : 본인에 대한 정보. 본 블로그의 경우 최하단에 2018 Grey Lee 로 cc(creative commons)표시현용으로 쓰였다. language : 메뉴나 기타 영역들에 대한 언어 설정. 보통 themes 아래에 있는 languages 디렉토리 아래에 yml 파일로 설정되어 있다. timezone : 블로그에 반영되는 시간의 적용 기준. URL_URL에 대한 정보들 url : 별도의 호스팅을 할 경우 설정이 필요하며 Github처럼 호스팅을 위한 배포처가 별도로 있을 경우 추가 설정이 필요없다. root : generate한 정적파일들이 호스팅 서버에 올라갔을 경우의 root 디렉토리를 의미한다. github의 특정 레파지토리로 올릴 경우 해당 레파지토리명를 명시해야 한다. permalink : 포스팅된 글로 이동시의 URL 형식을 의미한다. Directory_파일들의 경로 설정 source_dir: source(post, page, draft)들이 들어가 있는 디렉토리 경로 public_dir: generate 한 정적 파일들이 떨어질 디렉토리 경로 tag_dir: tags 값에 관련된 파일들의 경로 archive_dir: archives 값에 관련된 파일들의 경로 category_dir: categories 값에 관련된 파일들의 경로 Writing_포스팅과 관련 된 기본 설정값들 new_post_name : hexo new post 를 통해서 포스팅 파일을 생성했을 때의 파일 이름의 기본형태 default_layout : hexo new 를 했을 때 세번쨰 인자로 post, page 등을 전달하지 않아도 생성되는 기본 형태 post_asset_folder : 생성된 포스트마다 리소스를 분류하기 위한 별도의 디렉토리를 함께 생성할지 여부 highlight : 코드들에 대한 테마 적용여부, 사용할 지(enable) 라인별 숫자를 넣을지(line_number) 등이 설정된다. Pagination페이지네이션은 상단의 index_generator와 좀 더 아래에 per_page로 나뉘어져 있다. index_generator : 블로그 메인(Home)에서 아용되는 페이지네이션에 대한 설정. 한 페이지에 몇 페이지나(per_page) 보일지, 정렬순서는 어떻게(order_by)할지 설정한다. per_page : 위의 index_generator pagination이 적용되지 않은 일반 페이지의 페이지네이션. Achives, Categories와 같이 리스트형으로 포스팅의 제목 정도가 나오는 영역에서의 페이지네이션. Date/Time format_날짜와 시간의 형태 date_format : 날짜의 형태를 정의한다. time_format : 시간의 형태를 정의한다. theme_블로그에 테마 입히기 theme : 테마가 들어가 있는 디렉토리의 이름을 명시해주면 내부의 _config.yml의 값에 따라 테마가 적용된다. Deployment_hexo deploy를 통한 배포처 설정하기 deploy : hexo deploy 명령을 하면 배포될 곳을 명시한다. 배포처의 타입(type)과 배포될 장소(repo), 그리고 해당 브랜치(branch)를 설정한다.","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"},{"name":"develop","slug":"develop","permalink":"http://yoursite.com/tags/develop/"}]},{"title":"[Hexo] Github Page로 블로그 만들기 04","slug":"hexo-blog-make-04","date":"2018-03-21T13:27:07.000Z","updated":"2018-03-21T16:08:13.101Z","comments":true,"path":"2018/03/21/hexo-blog-make-04/","link":"","permalink":"http://yoursite.com/2018/03/21/hexo-blog-make-04/","excerpt":"","text":"마지막 포스팅이 2월 25일이라니, 근 한 달만에 포스팅이다. 사실 포스팅을 한 지 이렇게 오래 됐는지 몰랐다. 틈틈히 글을 써왔어야 했는데..마지막 포스팅과 지금 사이에 물리적 간극은 여느때와 다름 없었지만 개인적으론 12년지기와 함께한 7일간의 베트남 여행을 다녀오고기술 블로그와 병행하기로 한 글 블로그 개설 작업을 비롯해서여행 일지 정리를 하다보니 기술 블로그 쪽 포스팅을 잊고 지내게 되었다. 그러다 어제 문득 이카루스 테마 관련 글을 스스로가 참고하고자 기술 블로그를 열었는데…이럴수가, 테마를 적용하는 파트까지도 적어놓지 않았다니?? 난 당연히 테마를 적용하는 부분까지는 포스팅을 한 줄 알았는데, 겨우 개설만 해놓고 멈췄다니..그래서 마저 포스팅을 하기 위해, 이번 포스팅을 작성한다. 이제 기본 landscape 테마가 아닌, 예쁘게 만들어진 템플릿들을 이용해서 블로그를 꾸며보자. 테마를 넣어보..기전에.일단 내 포스팅에 사용된 Hexo의 테마는 이카루스 테마임을 밝혀둔다. | 링크된 이클립스 테마는 포크(folk)를 통해 아래와 같은 사항들이 커스터마이징 된 테마다.| 1. 헤더 고정| 2. 모바일 해상도에 따른 Search box 배치 변경| 3. 배경 색 변경 예시로 사용할, 그리고 지금보고 있는 블로그에도 사용된 이카루스 테마 말고도 Hexo는 190여개가 넘는 테마를 제공하는데더 많은 테마는 Hexo Theme 사이트에서 확인할 수 있다. 직접 들어가서 보면 알겠지만 생각보다 다양한 테마들이 있으며 애초에 Hexo가 Node.js를 기반으로 이루어져 있기에테마를 받아서 열어보면 node.js를 공부할때 튜토리얼에 늘상 나오는 ejs 파일들과 yml파일들, 그 외 css와 js파일들을 확인할 수 있다. 다만 다양한 테마가 있는만큼 테마들의 사용법도 다양하다.물론 기본적인 사용방법은 같지만, 정말 기본적인 수순까지다.이번에 글을 위한 블로그를 개설하면서 이카루스 외에 다른 테마로 가져가기 위해 두,세가지 정도의 테마를 사용해봤는데각 테마마다 config.yml의 내용도 달라지고 어떤 테마는 grundle을 사용하는 테마도 있으며css도 less나 sass등 테마를 만든 사람의 입맛에 맞게 구성되어 있었다. 물론 이런 파일적인 측면뿐만이 아니라 기능에서도 테마마다 차이가 있는데search 엔진도 제각각이고 카테고리, 태그 기능이 아예 없이 이쁘기만 한 곳도 있으며사진을 보여주는 라이브러리도 어떤 곳은 오픈된 라이브러리를 통해 이쁘게 보여주지만어떤 곳은 그냥 일반형태로 보여주는 등..그야말로 천차만별이었다. 따라서 이 포스팅을 통해서 테마를 적용한다면, 그저 기본적인 형태의 테마 사용법 + 이카루스 테마에 대한 이야기 정도를 알아갈 수 있을 것이다. 테마를 적용해보자(공통)일단 테마를 적용하기 위해선, 당연한 말이지만 적용하고픈 테마를 찾아야 한다.물론 난 이런거 필요없어. CSS 따윈 씹어먹어주지! 라고 하시는 분들은 본 포스팅을 패스하시고직접 장인의 손길을 담아 한땀한땀 블로그를 구성하셔도 된다고 미리 말씀을 드린다. 하지만 세상엔 능력자가 많고 나보다 미적감각이 뛰어난 이들은 얼마든지 있다.나는 나를 과신할 정도로 능력을 맹신하지 못 하기에 Hexo Theme 사이트를 뒤지며 모든 테마를 검토했다.물론 2편에도 언급했듯 Pilsner를 통해 이카루스 테마를 점지해두고 있었지만보다 이쁘고 내 활용용도에 맞는 테마가 있다면 얼마든지 다른 테마를 이용할 용의가 있었다. 테마를 살펴볼때 고려한 사항들은 여러가지였지만 일단 중요했던 건 카테고리와 태그 기능의 여부였다.기술 블로그로써의 목적이었고 포스팅을 한다면 Web, Android, Spring등으로 카테고라이징은 필수라고 생각했고거기에 태그 기능까지 있다면 차후 검색을 통해 찾기에도 제법 유용할 거라고 생각했기 때문이다. 그 외에 추가로 고려된 사항들이 UX 쪽의 세부사항들이었는데,블로그이다보니 포스팅이 길어질 거고 스크롤을 내릴때 메뉴들은 고정인가에서부터페이징인지 인피니티 스크롤인지, Search 엔진은 무엇을 썼는지등이 고려사항으로 적용되었다. 그러고 최종적으로 후보에 있던 것이 실제로 사용한 icarus와 tranquilpeak였는데 당시만해도icarus는 기술 블로그로, tranquilpead는 글 블로그의 테마로 사용하기로 마음먹었었다.(현재는 두 블로그 모두 icarus 테마를 사용중이다. 왜 그랬는지는 차후 포스팅에서 밝히기로 하겠다) 그래서 이제 마음에 드는 테마를 찾았다면 [Hexo] Github Page로 블로그 만들기 03에서 언급했던 hexo blog의 기본 디렉토리 구조를 떠올려보자.12345678910tech-blog├── _config.yml├── package.json├── scaffolds| ├── draft.md| ├── page.md| ├── post.md├── source| └── _posts└── themes 가장 하단부를 보면 버젓이 themes라는 디렉토리가 있음을 확인할 수 있다.그냥 봐도 직관적으로 아, 저기에 테마관련 파일들을 넣어두면 되겠구나, 라는 생각이 들 것이다. hexo에서 기본적으로 제공하는 테마는 landscape 테마다.지금 hexo server 명령어 통해 서버를 올리면 까만 우주에 태양인지 뭔지 모를 빛무리가 떠오르는 배경이 있는 그 테마. 테마를 적용하는 방법은 의외로 간단하다. themes 디렉토리로 이동을 한다. 그 위치에서 테마가 올라가있는 git repository를 clone 한다. _config.yml의 theme 값을 생성된 디렉토리의 명으로 해준다(보통은 테마의 이름이 디렉토리 명이다) 이렇게 3단계를 해주고 hexo server 명령어를 적용해주면 본인이 콕 짚은 테마가 적용된 블로그를 볼 수 있다(혹시나 제대로 나오지 않는다면 hexo clean을 해보고 서버를 올리도록 하자) 그 뒤에 웹 브라우저상의 상단 타이틀이나 description등을 고치고 싶다면root 디렉토리의 _config.yml 파일에서 아래와 같은 항목을 고쳐주도록 하자. 12345# Sitetitle: Grey Title # 좌상단 메인 타이틀 겸 브라우저 상단 타이틀subtitle: Grey SubTitle description: Grey Description author: Grey Lee Author # 하단(Footer)에 추가 됨 테마를 적용해보자(icarus)위의 설명을 따라 이용하고픈 테마를 적용시켰다면, 그 다음부터는 해당 테마가 제공하는 가이드를 참고하기 바란다.이미 언급했지만 테마들 마다 사용하는 방법이나 스펙이 전부 다르기때문에 그 모든 것을 포스팅하는 것은 불가능하다.(아니 뭐..물론 190여개를 다 해볼수야 있겠지만..테마 전문 리뷰어도 아니고, 굳이…?) 그래서 여기부터는 이카루스 테마를 사용한 사람들을 위한 추가 가이드이다. 1. 일단 Search 엔진을 좀 사용해봅시다.이카루스 테마는 우상단부에 Search Box를 기본으로 제공한다.다만 Search Box UI는 제공하는데 기능은 추가적으로 npm package를 설치해 줘야한다.(UI는 있는데 기능은 없다니..github deploy 때도 그랬지만, 왜 이렇게 해놓은 건지는 모르겠다.) 1npm install -S hexo-generator-json-content hexo-generator-json-content는 hexo 블로그 내부의page나 post형태의 글에 대해서 json 형식으로 검색 엔진을 제공한다고 한다. 트위터의 미리보기나 ajax를 통한 사이트 검색등에 유용하다나 뭐라나..제공되는 Github Repository의 설명을 보면 _config.yml에 일부 옵션 값을 명시함으로서 커스터마이징하게 사용할 수 있을 것 같지만그 부분은 차후에 시간을 별도로 할애해서 직접 해보고 포스팅을 추가하든지 해야겠다. 일단, 지금은 디폴트 상태의 insight search 기능을 추가해보도록 하자.…라고 하지만 위와 같이 npm package를 설치하는 걸로 끝이다. 더 정확하게는 이카루스 테마 디렉토리 내부의 _config.tml에 아래와 같이 옵션값을 true로 설정해줘야 하지만123# Searchsearch: insight: true 설정해주지 않아도 괜찮다. 애초에 기본값이 true 다. 이것으로 생성된 블로그 내부에서 검색기능을 사용할 수 있게 되었다.Search Box를 누르면 모달창과 같은 검색창이 나올 것이고 키워드를 입력하면 타이틀, 내용에 상관없이 전수검색이 적용되는 것을 확인할 수 있다. 2. 카테고리랑 테마를 눌렀..응? 404…?이제 search 엔진도 적용시켰겠다..본격적으로 포스팅을 하고 블로그 관리를 하면 된다고 생각했었다.그리고 적용된 테마가 신기해서 이곳저곳을 누르다가상단 메뉴의 카테고리와 태그를 눌러보면 404가 뜨는 걸 볼 수 있다. 아마 창세기처럼 새하얀 바탕에 Get/~~~~ 어쩌구 에러메시지가 본인들을 반겨줄 것이다. 처음엔 이게 뭐야, 내가 또 설정을 어디서 삐꾸냈나? 하고 한참을 헤맸더랬다.그러다 발견한 이카루스 Github Repository의 wiki를 보다보니 If you want enable the Categories and Tags for your blog, please copy _source/categories and _source/tags folder to sources folder under your site’s root folder, and then add menu to your _config.yml. 라는 안내 문구가 있었다. (직역주의)만약 너님이 허용하려면, 카테고리 그리고 태그를 너의 블로그를 위해.부디 복사해라 _source/categories 그리고 _source/tags 폴더를, 너의 사이트 root 아래에 source 폴더로.그리고 _config.yml에 메뉴항목으로 추가해라. ..아,음 새벽 1시쯤이라 그냥 드립을 좀 해보려한..겁니다.네, 그냥 이카루스 테마 아래에 있는 _source/categories랑 _source/tags 폴더를 root/source로 복사해주시고_config.yml 상단에 있는 menu 항목에 해당 정보를 추가해주면 된다.1234567# Menusmenu: # 요 아래 뒤에 붙는 건 URL임. 그러니까..깃헙 기준으로 보자면 # Home: . # 얘는 http://localhost:4000/tech_blog/ Archives: archives # 얘는 http://localhost:4000/tech_blog/archives Categories: categories # 얘는 http://localhost:4000/tech_blog/categories 뭐 이런 식 Tags: tags About: about 위 코드에도 적어놨지만 좌측의 값이 화면 상단 메뉴바에 표시되는 텍스트이고우측의 값은 사용하는 URL의 뒤에 붙는 값이다. 이렇게 폴더를 복사하고 _config.yml 에 추가함으로써 탈 없이 카테고리와 태그를 사용할 수 있다. 그리고 이 쯤에서 포스팅을 하며 문득 떠오른 기억이지만 블로그에 테마를 적용하고기본적인 메뉴구성을 한 것이 한 달도 전이라..정확히 기억이 나질 않는데아마 About 메뉴도 이와 비슷한 에러가 있었던 것 같다.(이래서 제때제때 포스팅을 해야 하는 것인데..) 참고로 위에 인용된 문구를 보면 알겠지만 이카루스에서도 카테고리와 태그에 대해서만 언급하고 있다.(그래서 나마저도 기억이 가물가물한 거다..처음부터 about 디렉토리가 source 아래에 있던 건지 내가 옮긴건지…) 혹시나 About도 404와 같은 에러가 난다면 카테고리와 태그 폴더를 복사해서 옮겼듯이About 또한 이카루스 테마 디렉토리의 _source/about 을 복사해서 동일한 위치에 가져다 놓도록 하자.그러고 about 디렉토리 아래의 index.md를 수정하면 화면에서도 잘 동작하는 것을 확인할 수 있다. 번역해보면 카테고리랑 태그 메뉴를 사용하려면 이카루스 테마 디렉토리 내부의 폴더 2개를 root/source로 옮겨줘야 한다는 거다. 일단 오늘 포스팅은 여기까지.다음에는 _config.yml을 통해서 일부 설정을 변경하는 내용을 포스팅할 예정이다.그러고나면 Disqus을 이용해서 Comment를 넣는 부분도 포스팅할 예정이다.","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"},{"name":"develop","slug":"develop","permalink":"http://yoursite.com/tags/develop/"}]},{"title":"[Hexo] Github Page로 블로그 만들기 03","slug":"hexo-blog-make-03","date":"2018-02-25T07:57:21.000Z","updated":"2018-03-21T15:35:42.192Z","comments":true,"path":"2018/02/25/hexo-blog-make-03/","link":"","permalink":"http://yoursite.com/2018/02/25/hexo-blog-make-03/","excerpt":"","text":"Hexo 시작해보기앞 선 포스팅에서 밝혔지만 지금 보는 블로그 icarus 테마가 적용되어있다. 사실 블로그를 만들어야 겠다는 생각은, Intro 포스팅을 보면 알겠지만 오래된 생각이다.그러다 더 이상 미루고 미루다가는 절대 안 할 거 같은 수동적 성격의 나를 채찍질해서 집 근처 스벅으로 오게되었다.(사실은 설 귀성 기차가 저녁 6시라 이때다 싶었다..) Github 작업거리블로그를 만들기 위해서는 무엇보다도첫 번째, 블로그를 서비스할 Github repository를 생성해야 한다.내 경우에는 tech_blog라는 이름의 repository를 생성하고Settings 에서 Github Page 를 master 브랜치로 설정 후 Save 해줬다.(굳이 master 브랜치가 아니라 다른 브랜치로 해도 상관은 없다.다만 일부 repository의 경우 로컬에서 master 브랜치로 Direct Push가 안 되는 경우도 있으니이 경우엔 Github Page 서비스 브랜치를 다른 걸로 바꾸거나다른 브랜치에 Push해서 Pull Request를 날리도록 하자.) 로컬 작업거리상세한 포스팅을 보기 전에, hexo로 블로그를 띄우는 명령어만 순서대로 뽑아보면 아래와 같다.1234npm install hexo-cli -ghexo init tech_blognpm intallhexo server 겨우 4줄!겨우 4줄만 터미널에 입력해주면 나만의 블로그가 생성되는 것이다. 자, 이제 일련의 과정을 좀 상세히 풀어보겠다.Github의 준비는 끝났으니 이제는 로컬에서 필요한 작업을 해 줄 차례다. 사실 hexo는 예전에 회사에서 사내 Github 도입기념으로 사내 블로그나 만들어볼까 싶어 건드린 적이 있었다.(이라고 하기엔 벌써 몇 달 전이니 그게…사실 써봤던 녀석이라 ‘Jekyll vs Hexo’에서 선택된 이유 중 하나다.) 앞 선 포스팅에서도 말했듯이 hexo는 npm을 이용해서 설치를 해준다.그렇기에 Node.js가 설치되어 있지 않다면 이 링크를 통해 설치해주길 바란다. Node.js가 설치 완료되었다면 hexo로 블로그 관련 파일들을 생성할 디렉토리로 이동한 뒤터미널(window는 cmd나 powershell)을 열어준다. npm을 통해 hexo를 설치해주기 위한 명령어는 아래와 같다.1npm install hexo-cli -g 위 명령어로 hexo 를 global(어디서 터미널을 열든 hexo 명령어를 쓰겠다는)로 설치한다.(..하려 했는데 root 권한이 필요하다. sudo -s 로 유저를 root로 변경 설치해주세요) 다음으로 현 위치(블로그 관련 파일들을 받을 디렉토리)에서1hexo init tech_blog 를 입력한다. hexo init 만 입력해도 블로그 관련 파일들이 생성되는데는 문제가 없다. 다만, 뒤에 디렉토리명을 붙이면 동명의 디렉토리가 생성되면서 거기에 파일들이 생성되는 것이다.hexo init 를 했을 때의 주의점은 명령어를 실행한 위치에 파일들이 생성되기 때문에 해당 디렉토리에는 그 어떤 파일도 있어서는 안 된다는 것이다.만약 단 하나의 텍스트 파일정도만 존재해도 hexo init 명령어는 Error 메시지를 뱉으면서 생성에 실패하게 된다. hexo init 후 조금만 기다리면 콘솔이 주루루루룩 위로 넘어가더니 뙇하고 각종 파일들이 생성될 것이고아마 기본적인 디렉토리 구조는 아래와 같을 것이다. 12345678910tech-blog├── _config.yml├── package.json├── scaffolds| ├── draft.md| ├── page.md| ├── post.md├── source| └── _posts└── themes 생성된 디렉토리로 이동 후 가장 먼저 해야 할 건 dependency package를 통해서package.json 에 명시된 package를 설치해주는 것이다. 1npm install 을 입력해주면 또 콘솔이 주루루루룩 하면서 위로 넘어가더니 뙇하고 끝이 난다. 자,이제 이 것만으로도 블로그 띄울 준비는 85%는 끝난 것이다.가볍에 콘솔에 아래 명령어를 입력해보자.1hexo server 그러면 http://localhost:4000 으로 hexo server가 뜨는 것을 확인할 수 있다.(hexo의 기본 테마는 landscape 로 되있기에 설정의 변경없이 그냥 서버를 띄웠다면우주의 까만 배경으로 빛무리가 뜨왛하는 landscape 테마가 보이는 게 정상이다) hexo를 통해 블로그를 띄웠으니 이젠 설정에 대한 부분을 조금 설명하겠다. hexo의 모든 설정은 _config.yml 파일 에서 담당한다.가져다쓰는 테마들은 모두 각 테마들만의 _config.yml 파일을 가지고 있는데root 디렉토리에 있는 _config.yml 파일이 총괄대장역할을 하며테마 디렉토리 안에 있는 _config.yml 파일들은 위치에 맞게끔 각 테마들을 담당하는 부대장이라 할 수 있다.(그렇기에 root의 _config.yml 내부에 theme 속성 값으로 부대장을 임명하면 해당 테마가 동작하는 방식이다) root의 _config.yml 에서 타이틀이나 subtitle, description, root url등의굵직한 설정들-총괄대장이니까-을 추가, 변경, 삭제등 관리할 수 있다.(아래에 삽질2라는 이름으로 포스팅을 했는데, 여기서 root url 부분을 간과한게 내 뒷통수를 때렸다) 이제 로컬에 띄운 블로그를 아~~까 만든 Github Repository에 배포해보려고 한다.배포를 하려면 당연히 배포처를 지정해야 하고 hexo의 모든 설정은 _config.yml 이 한다고 이야기해왔다.배포처 설정도 마찬가지로 _config.yml 에 있는데 해당 파일을 열어보면 맨 아래에 1234# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: 요런 상태로 초기 값이 텅 빈 상태일 것이다.이제 여기에 위에서 생성한 Github Reposity를 설정해주면 되는데 1234deploy: type: git repo: https://github.com/GithubUsername/RepoName.git branch: master 위와 같은 값으로 입력하면 된다.type은 git 이고 repo는 배포하려는 Github Repository의 URL이 들어가며branch는 배포 시 push 될 타겟 브랜치를 적으면 된다. 자, 이제 저기까지 설정이 끝난 상태에서1hexo generate 명령어를 실행하면 index.html 을 포함해서,Github Repository에 올라갈 정적 파일들이 public 디렉토리 아래로 생성된다. 파일들의 생성을 확인했다면1hexo deploy 이 명령어로 Github Repository로 hexo가 배포될 것이다. …그렇게 배포되어야 하는데…무사히 잘 올라가야 되는데…읭?Error Deployer not foundgit?? 에러? 읭? 이게 뭐지, 하고 구글링을 해보니 배포 대상이 Github일 경우 npm으로 설치해줘야 할 패키지가 또 있었다(아니, 이런 건 기본으로 좀 넣으라고 hexo님들아..) 그래서1npm install hexo-deployer-git --save 명령어를 통해 배포를 위한 전용 npm package를 추가 설치해줘야 한다.(npm의 –save 옵션에 대한 건 하단에 별첨을 참고바란다) 자, 배포에 필요한 패키지도 설치했으니 다시1hexo deploy 명령어를 실행해주면 깔끔하게 지정해 준 Github Repository로 배포되는 것을 확인할 수 있다. 그러고나서 Github Repository에 접속해서 지정된 URL로 들어가면 쫘잔, 하고 로컬에서 띄웠던 페이지가 나온다.(Github Page의 경우 배포 후 즉각 반영되진 않는다. 물론 수분내로 반영되지만 딜레이가 좀 있음을 알아두자) 자, 그럼 이제 직접 만들고 배포한 Github Page가 이상없이 동작하는 것을 확인할 수 있을 것이다. …정말? 잘 나오나요? CSS 하나도 안 깨지고, resource들 잘 읽어옵니꽈??그럼 요 아래는 안 읽으셔도 됩니다. 네? 깨져요? 그럼 요 아래 좀 더 읽으세요.(참고로 전 깨져서 여기서 한동안 삽질을 했습니다. 하…ㅠㅠ) 몇가지 삽질삽질 1.몇 번이나 언급했지만 hexo는 로컬에서 정적파일로 떨어트린 뒤에 Github에 업로드한다. 정적파일로 떨어트리는 이 과정(hexo generage)에서,기존 로컬에 남아있던 찌꺼기들로 인해 새로운 정적파일이 만들어질 때 불순물이 섞일 수도 있다고 한다.(어떤 파일, 데이터, 뭐가 불순물인지는 명확히 모르겠습니다. 그걸 알면 내가 이미 Guru지…) 그래서 hexo generate를 하기 전에 hexo clean 을 실행해서 청소를 한 번 싹 해줍니다.이러면 hexo clean 하는 과정에서 뭔가 delete 되었다는 걸 확인할 수 있습니다.그 후에 hexo deploy를 통해 Github으로 배포해보시기 바랍니다.(참고로 hexo deploy —generate 를 하면 정적파일을 로컬에 떨군 뒤에 배포까지 한 방에 해버립니다) 명령어만 순차적으로 나열해서 요약하자면 아래와 같군요.12hexo cleanhexo deploy -generate 이제 되나요? 되면 그만 읽으셔도 되구요.여전히 안 되나요? 그럼 좀 더 읽어주세요ㅋㅋㅋㅋ 삽질 2. 이게 제가 삽질한 문제점입니다(삽질1은 그냥 이 삽질을 해결코자 구글링을 하다보니 찾은 문제라, 이런 경우도 있구나 한 거구요) 저는 애초에 Gitub을 통해서 여러개의 블로그를 운영할 계획이었습니다.메인 블로그(개인 프로필과 서브 블로그들의 링크만 담당)가 있고기술 블로그, 글, 사진 블로그등을 생성할 생각이기 때문에일부러 Repository의 이름에도 tech라는 단어를 넣어서 tech_blog로 한 것인데요. 여기서 문제가 발생한 겁니다. 커스터마이징이 가능한 대부분의 서비스(앱이든 홈페이지든 뭐가 됐든)는최소한의 기능만을 디폴트로 제공하고 너님이 필요하시면 수정해서 쓰세요, 라는 것이 정석입니다.hexo도 당연히 그런 불문율을 따르고 있구요. Github 또한 그렇습니다. 그 중에 하나가 바로 Github Page의 URL 규칙인데요.기본적으로 Github은 username을 바탕으로 Page의 URL을 제공합니다.제 Username인 blinders를 예로 들자면 https://blinders.github.io/ 의 형태가 디폴트입니다.즉, https://username.github.io/ 의 형태이지요.(이에 대한 건 [Hexo] Github Page로 블로그 만들기 01의 아래 별첨에도 포스팅했습니다) 그럼 여기서 내가 별도로 생성한 Repository에 블로그를 생성한다면?네, URL의 기본형태는 https://username.github.io/RepoName가 됩니다.그리고 Github에서 저 URL을 root로 잡아버리기 때문에,정적인 파일로 떨궈서 서비스하는 hexo의 경우에는필요한 resource들의 경로를 제대로 잡지 못 하는 문제가 발생합니다.(아,내가 이것 때문에 얼마나 허망한 구글링의 시간을 보냈던가ㅠㅠ) 이건 어떻게 해결해야 할까요?당연하게도 Github Page에서 명명한 URL 규칙을 우리가 바꿀 수는 없으니hexo의 설정을 건드려줘야 합니다. 네, root 디렉토리의 _config.yml 에 해당 설정관련 값이 있습니다. _config.yml 을 열어보면 상단에 1234# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: http://yoursite.comroot: / 이런 게 있습니다.…네, 떡하니 써있네요.너님의 사이트가 서브디렉토리를 쓰면 root 설정에 값을 추가해주라고…무심결에 제대로 읽어보지 않고 성급히 구글링부터 한 제 잘못이네요..크읗ㅠ 이제 해결해 봅시다. 저기 root 항목에 /RepoName/ 을 적어주고12hexo clean hexo deploy —generate 를 해줍니다. 그럼 주루루룩 뜨더니 슝 하고 파일들이 Github Repository에 안착할 텐데요.이제 블로그 URL로 들어가보시면 CSS도 깨지지 않는 평안한 블로그를 보실 수 있을 겁니다. 아, 험난한 블로그 생성기네요. 지나고 나니 별 거 아닌데 넘나 힘든 것..마침 에픽하이 노래, 빈차가 나오는데 가사가 마음에 와닿네요.자라지 않으면 성장통도 그저 pain크으, 에픽하이 가사는 정말 사골국물이에요,울궈먹고 울궈먹어도 새롭고 이성보단 감성에 꽂혀주시네요ㅠㅠ …네, 샛길로 새는 걸 보면 아시겠지만 이 글은 여기까집니다. 다음엔 실제 포스팅을 해보고 포스팅 하는 거랑…..아, 그 전에 일단 css랑 메뉴(카테고리나 아카이브나 프로필이나)들부터좀 더 제 입맛에 맞게 커스터마이징하고 후기를 써야 겠군요.그럼 다음편에 뵐게요. 별첨 npm install hexo-deployer-git –save : –save 옵션은 package.json을 함께 업데이트 해 줍니다.나중에 이런 귀차니즘이 또 발생하지 않도록… –save에 추가로 –save-dev 라는 옵션도 있는데둘의 차이는 package.json 내부에 업데이트를 해줄 때,대상으로 쓰여질 json 객체가 dependencies 냐 devDependencies냐의 차이입니다. dependencies 와 devDependencies의 차이는 npm install 할 때 발생하는데.npm install은 기본적으로 package.json에 명시된 객체값들을 바탕으로의존(dependency) package들을 설치해줍니다.이때에 dependencies의 값은 항상 설치되고devDepenencies의 값은 –production 옵션을 붙이면 빠지게 됩니다..production에선 개발급(devDepenencies)은 뺀다는 의미로 받아들이시면 될 거 같습니다.만약 npm install “$package” 명령어를 통해서 하나하나 설치하신다면–dev 옵션을 붙이셔야 devDepenencies의 패키지들이 설치가 됩니다.","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"},{"name":"develop","slug":"develop","permalink":"http://yoursite.com/tags/develop/"}]},{"title":"[Hexo] Github Page로 블로그 만들기 02","slug":"hexo-blog-make-02","date":"2018-02-25T06:57:22.000Z","updated":"2018-03-21T15:35:05.516Z","comments":true,"path":"2018/02/25/hexo-blog-make-02/","link":"","permalink":"http://yoursite.com/2018/02/25/hexo-blog-make-02/","excerpt":"","text":"Jekyll vs hexo앞 선 포스팅에서 Github Page를 좀 더 편하게 구성해주는 플랫폼에Jekyll과 Hexo라는 아이들이 있는 것을 언급했다. 그러면 이제 둘 중 어느 것을 사용할 것인가를 정해야 하는 단계인데, 간단히 비교를 해보자면. Jekyll의 장점은 Github Page의 기본 지원체제. Git 히스토리를 통한 이력관리가 가능. Hexo 대비 좀 더 많은 테마. Github Page 라는 시스템의 기반이 애초에 Jekyll로 동작을 하기 때문에하나의 파일로 구성된 정적페이지 형태로써 호스팅이 제공되는 게 아니라Repository에 올라온 파일들이 Github에서 Jekyll을 통해 빌드되어 웹 페이지로써 호스팅되는 것이다. 그렇기 때문에 어떻게보면 Github에서 공식지원을 해준다고 볼 수도 있고Git 히스토리의 경우 파일이 바껴버리면 기존 파일의 삭제, 새 파일의 생성으로 인식해서히스토리를 제대로 관리할 수 없는데 이 경우엔 정적파일로 아예 교체되는 게 아니라기존 파일들의 내용만 수정되는 경우이므로 Git 히스토리 관리에도 용이하다. Jekyll의 단점은 기반언어가 Ruby다.외국이나 일본에서는 Ruby를 사용하는 개발자가 늘고있지만여전히 우리나라에선 Ruby는 생소한 언어이고 익숙치 않은 언어다.그렇기에 Jekyll을 사용하려는 입장에선 어색해할 수도 있으며환경에 따라 다를 수 있겠지만 Ruby는 느리다. Hexo의 장점은 npm(Node.js)을 이용. 문서화가 잘 되있다. 자체 배포가 가능하다. Hexo는 node.js를 기반으로해서 동작하는 언어다.그래서 테마들을 열어보면 ejs 파일로 구성된 파일이 많으며 그 덕에 Jekyll보다는 코드들이 익숙하다.설치시에도 npm install hexo-cli -g 명령어를 통해 간결하게 설치되며공식 홈페이지의 구성도 Jekyll보다는 심플하고 한글화도 잘 되어있다. Hexo의 단점은 Jekyll보다 테마가 적다. Git 히스토리를 통한 이력관리가 불가능하다. 아무래도 Jekyll이 Github Page에서 지원하는 플랫폼이다보니 가져다 쓸 수 있는 테마가 적다.하지만 그렇다고해서 월등히 차이가 난다, 라는 느낌까진 아니고 Jekyll이 100이라면 Hexo는 80쯤 되는 느낌이다. 2번 항목이 오히려 조금 문제일 수도 있는데 Hexo는 명령어를 통한 자체 빌드와 배포를 통해서매번 완성된 하나의 파일(index.html)을 생성하는 방식으로 서비스를 제공한다.위에서도 언급했지만 이런 경우 Git 히스토리는 기존의 파일에 대한 수정으로 보는 것이 아니라기존 파일이 삭제 되고 아예 새로운 파일이 생성되었다고 판단하기 때문에 Git 히스토리를 통한 이력관리가 힘들어진다.또한 css파일등을 보더라도 이 값이 어느 파일에서 기인한건지를 판단할 수 없기때문에 이 또한 이력관리에 애로사항으로 볼 수 있다. 그랬지만 결론은 Hexo결국 둘 중 무얼 할까 고민을 했다. Jekyll-Ruby의 경우 잠깐이지만 사용해 본 경험이 있기에(조금의 공부야 필요하겠지만) 어색하지도 않았고엔터프라이즈급 대형 서비스를 호스팅 할 것도 아니기 때문에 Ruby의 느린 속도라는 단점도 감내할 수준이었다. Hexo의 경우도 Git 히스토리를 통한 이력관리가 불가능한 단점이지만이는 어디까지나 빌드&amp;배포 후 정적파일에 대한 이력관리가 불가능한 것이지PC에 있는 파일들에 대한 이력관리까지 불가능 한 것은 아니었다.즉, 별도의 Repository를 하나 더 생성해서 거기서 관리하면 되는 것이었다. 결국 최종 선택은 Hexo였는데, 위에 주구장창 장단점을 비교한 것과는 달리 선택 사유는 심플했다. 하려는 것이 블로그이니 만큼 블로그의 목적에 맞는 테마가 있는 걸로 선택하기로 한 것이다.(어차피 포스트 내용은 파일로써 남을 거고, 둘다 Markdown은 지원하니까) 이런 저런 테마를 찾아보던 중 Pilsner가 사내 금요토크에서 사용한 icarus 테마가 딱 마음에 들었다.(카테고리&amp;아카이브 기능, 심플한 디자인, 넓은 포스트 영역, 페이징, Internal Search 기능등) 해당 테마를 눈여겨 봐두고 있다가 결국 오늘(18.02.15), 결행을 감행했고 이 블로그가 탄생하게 되었다.","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"},{"name":"develop","slug":"develop","permalink":"http://yoursite.com/tags/develop/"}]},{"title":"[Hexo] Github Page로 블로그 만들기 01","slug":"Hexo-blog-make-01","date":"2018-02-21T12:53:51.000Z","updated":"2018-03-21T15:34:55.481Z","comments":true,"path":"2018/02/21/Hexo-blog-make-01/","link":"","permalink":"http://yoursite.com/2018/02/21/Hexo-blog-make-01/","excerpt":"","text":"Github Blog?알 사람은 알겠지만 Github은 Repository를 개설한 뒤 Settings에 있는GitHub Pages 라는 설정을 통해 웹 페이지를 개설 할 수 있다. 해당 설정은 root 디렉토리의 index.html을 통해서 웹페이지를 제공하는 서비스인데Github을 이용하는 수많은 개발자들, 스타트업, 혹은 일반기업들도해당 설정을 통해서 자신만의 포트폴리오를 만들거나혹은 Repository에 올린 오픈소스의 소개등의 용도로 사용되고 있다.(간단한 소개는 README.md를 이용하지만…) 그냥 쌩으로 해야 되나?Github을 통해서 블로그를 개설하기로 한 뒤 가장 고민했던 건 어떤 플랫폼을 사용할 건가, 였다.Github Page가 뭔지는 모르겠고 일단 띄워만 보자, 싶다면 아래와 같은 절차를 거치면 된다. 블로그를 위한 Repository를 만든다. 그리고 root 디렉토리에 index.html 파일을 하나 만든다. 생성한 파일(index.html)에 cdn으로 사용하려는 라이브러리를 땡기고 style 태그로 css를 넣고 script로 javascript를 넣는다. body에 원하는 문구를 넣는다. 그러면 웹 페이지가 뜨긴 뜬다.위의 순서가 무슨 소린지 모르겠다면, 아래 코드를 복사해서 index.html 파일에 넣어보자.아래 코드처럼만 작성해도 우리는 Hello Grey! 라는 문구를 브라우져에서 확인할 수 있다. 123456789101112&lt;!DOCTYPE html&gt;&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt; &lt;head&gt; &lt;title&gt;Grey Title&lt;/title&gt; &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; Hello Grey! &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 아아, 심플하다.매우 많이 심플해서 예전에 APM(Apache+Php+MySQL)으로 하나하나 설정하며웹 페이지 하나를 겨우겨우 띄웠던 과거의 내가 초라해지기까지 하는 느낌이다. 이처럼 겨우 index.html을 만들어 넣어놓는 것만으로도 Github Page는 웹 페이지로써의 동작을 해준다.(아,물론 Repository의 Settings에서 설정을 해줘야 하지만, 이마저도 메인 Repository라면 필요가 없다) 하지만 이처럼 한 파일에 다 떄려박는건 너무 옛날 방식이고, 내가 만들려던 건 엄연히 블로그다. 그냥 Hello Grey! 를 보여주고 한 페이지로 땡! 하고 끝나는 사이트가 아니라블로그로써의 동작을 하는 Github Page를 개설하는 것이 목적이다. 그렇기에 블로그라면 당연히 글을 쓸 수 있는 기능이 있어야 하고 그 글을 보여주는 기능 그리고 글에 대한 카테고리 기능이나 추가적으로 태그에 대한 기능이 있으면 더 좋고 인피니티 스크롤이 아닌 이상 페이징도 되야한다. 이 외에 부가적인 기능도 있겠지만 핵심은 포스팅이니까 이와같고 그렇게 더해서 쓴 글들을 이쁘게(이건 중요하다) 보여줘야 한다.보기에 좋은 떡이 먹기도 좋다고, 이뻐야 한다. 뭔가 되게 많은 것 같지만 심플하게 정리를 해보면 내가 원하는 건 2가지다. 블로그로써의 기능 디자인 위와 같은 블로그로써의 핵심기능을 제공하면서도내가 만들었지만 내가 만들지 않은 것 같은 이쁨을 뿜뿜할 수 있어야 한다. 물론 저 위에 적은 index.html에 장인의 손길로 한땀한땀 작업해서 만들 수는 있다.하지만 그건 내 입맛에 딱맞는 자동차 하나 만들자고 자동차 공장을 만드는 꼴이다. 배보다 배꼽이 커지는 짓이랄까. 그렇기에 Github Page 를 통해서 블로그를 만들려는 많은 이들은 아마도 생각했을 것이다.이걸 자동화 해주는 플랫폼이 있으면 좋겠다, 라고.그리고 당연하게도 있었으면 좋겠다, 라고 생각하는 서비스와 기능은 이미 있는 게 이 바닥의 정설이다. 심지어 그런 애들이 2개나 있다.언뜻보면 지킬박사와 하이드라고 읽을 수도 있는 이 두 녀석의 이름은Jekyll, 그리고 Hexo다. 메인 Repository : Github 에서 ID를 생성하면 기본적으로 Username에 대한 블로그를 제공한다.다만 이또한 Repository를 별도로 생성해야만 관리가 가능하며생성방법은 Repository의 이름을 username.github.io 로 생성하면 된다.해당 Repository를 만들면 Settings에 Github Page 관련 기능이 자동으로 True 상태이며http://username.github.io/ 과 같은 형태로 URL을 제공한다.다음 포스팅에서도 설명하겠지만 이외에 다른 Repository에서 Github Page를 이용하려 한다면Settings에서 별도로 설정을 해줘야 하며 URL의 형식또한 http://username.github.io/ 에Repository 가 추가로 붙어서 http://username.github.io/RepositoryName 과 같은 형태를 띈다.","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"web","slug":"web","permalink":"http://yoursite.com/tags/web/"},{"name":"blog","slug":"blog","permalink":"http://yoursite.com/tags/blog/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"},{"name":"develop","slug":"develop","permalink":"http://yoursite.com/tags/develop/"}]},{"title":"Intro","slug":"intro","date":"2018-02-18T13:16:00.000Z","updated":"2018-02-25T04:01:38.091Z","comments":true,"path":"2018/02/18/intro/","link":"","permalink":"http://yoursite.com/2018/02/18/intro/","excerpt":"","text":"대한민국에서 개발자로 일하고 있는 Grey입니다. 본 사이트는 제 기술 블로그로 운영 될 예정입니다. 현재 하고 있는 일에 대한 정리거리들과제가 관심있어 하는 흥미거리들,그리고 대학때 했던 정리노트들의 Web Note가 주를 이루지 않을까 싶습니다. 그리고 이 포스팅은, 본격적인 포스팅에 앞서서 적는 Intro가 되겠습니다. 음, 사실 블로그 개설에 대한 계획은 작년초부터 했었습니다.…네, 2017년 1월쯤부터요. 한참이라는 표현도 모자랄 정도로 옛적이죠? 특유의 게으름이 빛을 발하고시켜서 해야하는 회사 일들과 vs 내가 하고싶은 일들 사이에서사춘기 아이마냥 방황하느라 차일피일 미루게 되었고(사실 뭐 그냥 다 변명이죠…아하하) 그 결과 1년이나 더 지난 2018년 2월, 오늘에서야 개설하게 되었습니다.본능적으로 이젠 마지노선이라고 생각한 거 같아요. 나라는 개발자에게 있어서,더는 내가 하고싶은 일을 미룰 수 없다 라던가해야하는 일들에 이안류마냥 휩쓸리고 싶지 않다던가1단적이지않은 복합적인 이유들이 머릿방 한 구석에 자리를 잡았고 합의를 본 거죠. ‘야, 더는 안 되, 이젠 만들어, 시작해, 뭐가 됐든!‘ 네, 그런 직관적 위기감에 의해서 시작하게 되었습니다. 음, 제가 키보드만 잡으면 좀 수다쟁이가 되는 글쟁이다보니 또 주저리주저리 한참 쓰려고 하네요.이 포스팅은 어디까지나 Intro 니까, 이만 줄이도록 하겠습니다.다음엔 기술 포스팅에서 뵐게요.","categories":[],"tags":[]}]}